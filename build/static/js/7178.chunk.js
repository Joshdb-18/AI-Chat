"use strict";(this.webpackChunkproject_bae=this.webpackChunkproject_bae||[]).push([[7178],{37178:function(e,a,t){t.d(a,{offchainLookup:function(){return l},offchainLookupSignature:function(){return c}});var r=t(46271);t(315),t(62991),t(65883);class s extends r.B{constructor({callbackSelector:e,cause:a,data:t,extraData:s,sender:n,urls:o}){var c;super(a.shortMessage||"An error occurred while fetching for an offchain result.",{cause:a,metaMessages:[...a.metaMessages||[],null!=(c=a.metaMessages)&&c.length?"":[],"Offchain Gateway Call:",o&&["  Gateway URL(s):",...o.map((e=>`    ${(0,r.h)(e)}`))],`  Sender: ${n}`,`  Data: ${t}`,`  Callback selector: ${e}`,`  Extra data: ${s}`].flat()}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupError"})}}class n extends r.B{constructor({result:e,url:a}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${(0,r.h)(a)}`,`Response: ${(0,r.s)(e)}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupResponseMalformedError"})}}class o extends r.B{constructor({sender:e,to:a}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${a}`,`OffchainLookup sender address: ${e}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupSenderMismatchError"})}}const c="0x556f1830",u={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function l(e,{blockNumber:a,blockTag:t,data:c,to:l}){const{args:d}=(0,r.j)({data:c,abi:[u]}),[i,f,h,p,b]=d;try{if(!function(e,a){if(!(0,r.i)(e))throw new r.I({address:e});if(!(0,r.i)(a))throw new r.I({address:a});return e.toLowerCase()===a.toLowerCase()}(l,i))throw new o({sender:i,to:l});const s=await async function({data:e,sender:a,urls:t}){var s;let o=new Error("An unknown error occurred.");for(let c=0;c<t.length;c++){const u=t[c],l=u.includes("{data}")?"GET":"POST",d="POST"===l?{data:e,sender:a}:void 0;try{const t=await fetch(u.replace("{sender}",a).replace("{data}",e),{body:JSON.stringify(d),method:l});let c;if(c=null!=(s=t.headers.get("Content-Type"))&&s.startsWith("application/json")?(await t.json()).data:await t.text(),!t.ok){o=new r.H({body:d,details:null!=c&&c.error?(0,r.s)(c.error):t.statusText,headers:t.headers,status:t.status,url:u});continue}if(!(0,r.p)(c)){o=new n({result:c,url:u});continue}return c}catch(e){o=new r.H({body:d,details:e.message,url:u})}}throw o}({data:h,sender:i,urls:f}),{data:c}=await(0,r.k)(e,{blockNumber:a,blockTag:t,data:(0,r.m)([p,(0,r.o)([{type:"bytes"},{type:"bytes"}],[s,b])]),to:l});return c}catch(e){throw new s({callbackSelector:p,cause:e,data:c,extraData:b,sender:i,urls:f})}}}}]);